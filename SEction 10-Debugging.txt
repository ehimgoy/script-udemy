Debugging

Built-in-bash options for debugging

Why debug?
-A bug is really an error
-Examine the inner workings of your script
-Determine the root of unexpected behaviour
-Fix bugs(errors)

Built in debugging help
-x =Prints commands as they execute
-After substitutions and expansions
-Called an x-trace,tracing,or print debugging
-#!/bin/bash -x
-set -x
 -set +x to stop debugging

#!/bin/bash -x
TEST_VAR="test"
echo "TEST_VAR"

############
#!/bin/bash
TEST_VAR="test"
set -x
echo $TEST_VAR
set +x
hostname

#########################
Built in debugging help
-e = Exit on error
Can be combined with other options.
-#!/bin/bash -ex
#!/bin/bash -xe
#!/bin/bash -e -x
#!/bin/bash -x -e

#!/bin/bash -e
FILE_NAME="/not/here"
ls $FILE_NAME
echo $FILE_NAME

#!/bin/bash -ex
FILE_NAME="/not/here"
ls $FILE_NAME
echo $FILE_NAME

################
Build in debugging help

-v = Prints shell input lines as they are read
Can be combined with other options

#!/bin/bash -v
TEST_VAR="test"
echo "$TEST_VAR"


help set | less  -use to get more on debugging

############
-Variables for debugging
-Manual debugging tips
-syntax highlighting
-More bash built-ins
-File types

Manual debugging
-you can create your own debugging code.
-Use a special variable like DEBUG
DEBUG=true
DEBUG=false

#!/bin/bash
DEBUG=true
if $DEBUG
then
 echo "Debug mode ON."
else
 echo "Debug mode OFF."
fi

#!/bin/bash
DEBUG=true
$DEBUG && echo "Debug mode ON."

#!/bin/bash
DEBUG=false
$DEBUG || echo "Debug mode OFF."

#$##########
PS4 variable

#!/bin/bash -x
PS4='+ $BASH_SOURCE : $LINENO : '
TEST_VAR="test"
echo "$TEST_VAR"

##########3

#!/bin/bash -x
PS4='+ ${BASH_SOURCE} : ${LINENO} : ${FUNCNAME[0]} ()'
debug(){
   echo "Executing: $@"
   $@
}
debug ls

########
DOS vs LINUX (Unix) File Types
-CRLF/Carriage Return,Line Feed
cat -v script.sh

#!/bin/bash^M
echo "Hello World."^M

